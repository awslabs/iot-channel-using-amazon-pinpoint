# IoT Channel Using Amazon Pinpoint
#
# template for iot-channel-using-amazon-pinpoint
# **DO NOT DELETE**
#
# author: rjlowe@
AWSTemplateFormatVersion: 2010-09-09

Description: (SO0074) - Solution - Master Template

Parameters:
  IoTTopicName:
    Type: String
    Default: "campaign/pinpoint"
    Description: Name of your IoT Topic

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Section 1
      Parameters:
      - Param1
    ParameterLabels:
      Param1:
        default: Parameter #1

Mappings:
  SourceCode:
    General:
      S3Bucket: "%%BUCKET_NAME%%"
      KeyPrefix: "%%SOLUTION_NAME%%/%%VERSION%%"
  LambdaRuntime:
    Language:
      Python: python3.7
  Solution:
    Parameters:
      ID: SO0074
      Version: "%%VERSION%%"
      SendAnonymousUsageData: 'Yes' # change to 'No' if needed

Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        -
          PolicyName: "LambdaExecutionPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action: "iot:Publish"
                Resource: !Sub "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/*"
              -
                Effect: "Allow"
                Action: "logs:CreateLogGroup"
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
              -
                Effect: "Allow"
                Action:
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/PinpointIoTChannelFunction:*"
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/PinpointToIoTLogs:*"
  PinpointApplication:
    Type: AWS::Pinpoint::App
    Properties:
      Name: "IoT Application"
  PinpointApplicationSettings:
    Type: AWS::Pinpoint::ApplicationSettings
    Properties:
      ApplicationId: !Ref PinpointApplication
      CampaignHook:
        LambdaFunctionName: !GetAtt LambdaFunction.Arn
        Mode: 'DELIVERY'
    DependsOn: LambdaPermission

  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt LambdaFunction.Arn
      Principal: !Sub 'pinpoint.${AWS::Region}.amazonaws.com'
      SourceArn: !Sub 'arn:aws:mobiletargeting:${AWS::Region}:${AWS::AccountId}:/apps/*'

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "pinpoint-iot-campaign-hook"
      Environment:
        Variables:
          IOT_TOPIC: !Ref IoTTopicName
          LOG_LEVEL: 'ERROR'
          SOLUTION_UUID: !GetAtt GenerateUUID.UUID
          SOLUTION_ID: !FindInMap ["Solution", "Parameters", "ID"]
          SOLUTION_VERSION: !FindInMap ["Solution", "Parameters", "Version"]
          SEND_ANONYMOUS_DATA: !FindInMap ["Solution", "Parameters", "SendAnonymousUsageData"]
      Code:
        S3Bucket: !Join ["-", [!FindInMap ["SourceCode", "General", "S3Bucket"], Ref: "AWS::Region" ]]
        S3Key: !Join ["/", [!FindInMap ["SourceCode", "General", "KeyPrefix"],  "pinpoint-iot-campaign-hook.zip"]]
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      Runtime: !FindInMap ["LambdaRuntime", "Language", "Python"]
      Timeout: 60
      MemorySize: 128

# Custom Resource
  CustomResourceHelper:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Join ["-", [!FindInMap ["SourceCode", "General", "S3Bucket"], Ref: "AWS::Region" ]]
        S3Key: !Join ["/", [!FindInMap ["SourceCode", "General", "KeyPrefix"],  "custom-resource-helper.zip"]]
      Environment:
        Variables:
          SOLUTION_ID: !FindInMap ["Solution", "Parameters", "ID"]
          SOLUTION_VERSION: !FindInMap ["Solution", "Parameters", "Version"]
          SEND_ANONYMOUS_DATA: !FindInMap ["Solution", "Parameters", "SendAnonymousUsageData"]
      Description: Helps set up the IoT Channel Using Amazon Pinpoint solution.
      Handler: index.handler
      MemorySize: 256
      Role: !GetAtt CustomResourceHelperRole.Arn
      Runtime: "nodejs10.x"
      Timeout: 300

  CustomResourceHelperRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        ## Write to CloudWatch
        - PolicyName: CloudWatchLoggingPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutDestination
                  - logs:PutLogEvents
                Resource:
                  !Join
                    - ''
                    - - 'arn:aws:logs:'
                      - !Ref AWS::Region
                      - ':'
                      - !Ref AWS::AccountId
                      - ':log-group:*'

# Custom Resource Invocations
  GenerateUUID:
    Type: Custom::LoadLambda
    Properties:
      ServiceToken: !GetAtt CustomResourceHelper.Arn
      CustomResourceAction: GenerateUUID
